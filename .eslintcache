[{"C:\\Dev\\React\\bwr-app\\src\\index.tsx":"1","C:\\Dev\\React\\bwr-app\\src\\reportWebVitals.ts":"2","C:\\Dev\\React\\bwr-app\\src\\App.tsx":"3","C:\\Dev\\React\\bwr-app\\src\\components\\header\\TopBar.tsx":"4","C:\\Dev\\React\\bwr-app\\src\\components\\header\\hamburger\\HamburgerNavigation.tsx":"5","C:\\Dev\\React\\bwr-app\\src\\components\\Map\\LMap.tsx":"6","C:\\Dev\\React\\bwr-app\\src\\components\\Map\\LMarker.tsx":"7","C:\\Dev\\React\\bwr-app\\src\\enums.ts":"8"},{"size":535,"mtime":1608296217657,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":421,"mtime":1608370446180,"results":"12","hashOfConfig":"10"},{"size":463,"mtime":1608404258261,"results":"13","hashOfConfig":"10"},{"size":341,"mtime":1608149504998,"results":"14","hashOfConfig":"10"},{"size":1634,"mtime":1608399770410,"results":"15","hashOfConfig":"10"},{"size":1729,"mtime":1608405861024,"results":"16","hashOfConfig":"10"},{"size":193,"mtime":1608402056248,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"20m2o5",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dev\\React\\bwr-app\\src\\index.tsx",[],["37","38"],"C:\\Dev\\React\\bwr-app\\src\\reportWebVitals.ts",[],"C:\\Dev\\React\\bwr-app\\src\\App.tsx",[],"C:\\Dev\\React\\bwr-app\\src\\components\\header\\TopBar.tsx",[],"C:\\Dev\\React\\bwr-app\\src\\components\\header\\hamburger\\HamburgerNavigation.tsx",[],"C:\\Dev\\React\\bwr-app\\src\\components\\Map\\LMap.tsx",["39","40","41","42"],"import React from 'react';\r\nimport './LMap.css';\r\nimport L from 'leaflet';\r\nimport { Map, TileLayer} from 'react-leaflet';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport {Vehicle } from '../../models/vehicle.model';\r\nimport {LMarker} from './LMarker';\r\n\r\n\r\nconst serverUrl = 'http://localhost:8081/';\r\n\r\nexport const LMap: React.FC = () => {\r\n  \r\n    let timer;\r\n    const [zoom, setZoom] = useState(13);\r\n    const [markers, setMarkers] = useState<any>();\r\n\r\n    useEffect(() => {\r\n        timer = setTimeout(() => {\r\n            fetch(serverUrl).then(response => response.json()).then((data: Vehicle[]) => {\r\n              console.log('data: ', data);\r\n              let listItems = data.map(dataItem => { return(\r\n                 <LMarker _id={dataItem._id} createdAt={dataItem.createdAt} updatedAt={dataItem.updatedAt}\r\n                          location={dataItem.location} status={dataItem.status} type={dataItem.type} />\r\n              );\r\n              });\r\n                setMarkers(listItems);\r\n            },\r\n            (error) => {\r\n                setMarkers([]);\r\n                console.log(error);\r\n            })\r\n        }, 5000);\r\n\r\n        return(() => {timer = null;\r\n        });\r\n    })\r\n\r\n    return (\r\n        <Map className=\"map\" center={{\r\n            lat: 35.787449,\r\n            lng: -78.6438197,\r\n          }} zoom={zoom}>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {markers}\r\n      </Map>\r\n    )\r\n};\r\n","C:\\Dev\\React\\bwr-app\\src\\components\\Map\\LMarker.tsx",["43","44","45"],"import React from 'react';\r\nimport L from 'leaflet';\r\nimport { Marker, Popup } from 'react-leaflet';\r\nimport {Vehicle } from '../../models/vehicle.model';\r\nimport tractor from '../../assets/tractor.png';\r\nimport drone from '../../assets/drone.png';\r\nimport onMissionShd from '../../assets/on-mission.png';\r\nimport idleShd from '../../assets/idle.png';\r\nimport unreachableShd from '../../assets/unreachable.png';\r\nimport { VehicleStatus, VehicleType } from '../../enums';\r\n\r\n\r\nexport const LMarker: React.FC<Vehicle> = ({_id, createdAt, updatedAt, type, status, location }) => {\r\n    let icon = createIcon(status as VehicleStatus, type as VehicleType);\r\n\r\n    return (\r\n        <Marker key={_id} icon={icon}\r\n                position={[Number(location.latitude), Number(location.longitude)]}>\r\n            <Popup>\r\n                {_id}  <br/> {status}\r\n            </Popup>\r\n        </Marker>);\r\n};\r\n\r\nconst createIcon = (status: VehicleStatus, type: VehicleType): L.Icon<L.IconOptions> => {\r\n    return L.icon({\r\n        iconUrl: checkIconUrl(type),\r\n        iconSize: [30,30],\r\n        shadowUrl: checkShadowUrl(status),\r\n        shadowSize: [30, 30],\r\n        shadowAnchor: [4, 40]\r\n    });\r\n}\r\n\r\nconst checkIconUrl = (type: VehicleType): string => {\r\n    let result = '';\r\n    if (type == VehicleType.tractor) {\r\n        result = tractor;\r\n    } else {\r\n        result = drone;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst checkShadowUrl = (status: VehicleStatus): string => {\r\n    let result = '';\r\n    if (status == VehicleStatus.onMission) {\r\n        result = onMissionShd;\r\n    } else if (status == VehicleStatus.idle) {\r\n        result = idleShd;\r\n    } else {\r\n        result = unreachableShd;\r\n    }\r\n    return result;\r\n\r\n}","C:\\Dev\\React\\bwr-app\\src\\enums.ts",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":9},{"ruleId":"50","severity":1,"message":"54","line":16,"column":18,"nodeType":"52","messageId":"53","endLine":16,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":20,"column":17,"nodeType":"57","endLine":34,"endColumn":17},{"ruleId":"50","severity":1,"message":"58","line":36,"column":23,"nodeType":"52","messageId":"53","endLine":36,"endColumn":28},{"ruleId":"59","severity":1,"message":"60","line":37,"column":14,"nodeType":"61","messageId":"62","endLine":37,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":47,"column":16,"nodeType":"61","messageId":"62","endLine":47,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":49,"column":23,"nodeType":"61","messageId":"62","endLine":49,"endColumn":25},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'L' is defined but never used.","Identifier","unusedVar","'setZoom' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'timer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'timer' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]